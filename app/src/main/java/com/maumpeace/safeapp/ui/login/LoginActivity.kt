package com.maumpeace.safeapp.ui.login

import android.Manifest
import android.annotation.SuppressLint
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.telephony.TelephonyManager
import android.util.Base64
import android.view.WindowInsets
import android.view.WindowManager
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.edit
import com.google.firebase.messaging.FirebaseMessaging
import com.kakao.sdk.auth.model.OAuthToken
import com.kakao.sdk.user.UserApiClient
import com.maumpeace.safeapp.databinding.ActivityLoginBinding
import com.maumpeace.safeapp.ui.main.MainActivity
import com.maumpeace.safeapp.util.TokenManager
import com.maumpeace.safeapp.viewModel.LoginViewModel
import dagger.hilt.android.AndroidEntryPoint
import timber.log.Timber
import java.security.MessageDigest

/**
 * ‚úÖ LoginActivity
 * - Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ‚Üí ÏÑúÎ≤ÑÏóê accessToken Ï†ÑÎã¨ ‚Üí JWT ÏàòÏã† ÌõÑ Main ÏßÑÏûÖ
 */
@AndroidEntryPoint
class LoginActivity : AppCompatActivity() {

    private lateinit var binding: ActivityLoginBinding
    private val loginViewModel: LoginViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityLoginBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // API 30 Ïù¥ÏÉÅÏóêÏÑú Ï†ÑÏ≤¥ÌôîÎ©¥ ÏÑ§Ï†ï
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            window.insetsController?.hide(WindowInsets.Type.statusBars())
        } else {
            @Suppress("DEPRECATION") window.setFlags(
                WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN
            )
        }

        setupObservers()
        setupListeners()
        logHashedPhoneNumberWithPermissionCheck()

    }

    @SuppressLint("MissingPermission", "HardwareIds")
    private fun logHashedPhoneNumberWithPermissionCheck() {
        val permissions = mutableListOf(
            Manifest.permission.READ_PHONE_NUMBERS,
            Manifest.permission.READ_PHONE_STATE,
        )

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            permissions.add(Manifest.permission.POST_NOTIFICATIONS)
        }

        val deniedPermissions = permissions.filter {
            ActivityCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }

        if (deniedPermissions.isNotEmpty()) {
            // ÏÑ§Î™ÖÏù¥ ÌïÑÏöîÌïú Í∂åÌïúÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ToastÎ°ú ÏïåÎ¶º
            if (deniedPermissions.any {
                    ActivityCompat.shouldShowRequestPermissionRationale(this, it)
                }
            ) {
                Toast.makeText(this, "Î°úÍ∑∏Ïù∏ÏùÑ ÏúÑÌï¥ Í∂åÌïúÏù¥ ÌïÑÏöîÌï¥Ïöî", Toast.LENGTH_LONG).show()
            }

            ActivityCompat.requestPermissions(this, deniedPermissions.toTypedArray(), 1234)
            return
        }

        // Î™®Îì† Í∂åÌïú ÌóàÏö© ÏÉÅÌÉúÏùº Í≤ΩÏö∞ Î°úÏßÅ Ïã§Ìñâ
        val telephonyManager = getSystemService(TELEPHONY_SERVICE) as TelephonyManager
        val phoneNumber = telephonyManager.line1Number

        if (!phoneNumber.isNullOrBlank()) {
            try {
                val hashed = hashPhoneNumber(phoneNumber)
                Timber.tag("PHONE_HASH").d("Ï†ÑÌôîÎ≤àÌò∏ Ìï¥Ïãú: $hashed")
                TokenManager.saveHashedPhoneNumber(this, hashed)
            } catch (e: IllegalArgumentException) {
                Timber.tag("PHONE_HASH").w("Ï†ÑÌôîÎ≤àÌò∏ Ìï¥Ïãú Ïã§Ìå®: ${e.message}")
            }
        } else {
            Timber.tag("PHONE_HASH").w("Ï†ÑÌôîÎ≤àÌò∏Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
        }
    }

    /**
     * Ï†ÑÌôîÎ≤àÌò∏Î•º SHA-256 + Base64Î°ú Ìï¥Ïãú Ï≤òÎ¶¨
     */
    private fun hashPhoneNumber(phone: String): String {
        val clean = phone.replace("\\s".toRegex(), "")
            .replace("-", "")
            .replace("+82", "0")
            .filter { it.isDigit() }

        if (clean.isBlank()) throw IllegalArgumentException("Invalid phone number")

        val sha256 = MessageDigest.getInstance("SHA-256")
        val hash = sha256.digest(clean.toByteArray())
        return Base64.encodeToString(hash, Base64.NO_WRAP)
    }

    @SuppressLint("MissingPermission", "HardwareIds")
    private fun collectLoginInfoAndLogin(
        accessToken: String,
        email: String,
        profileImage: String,
        nickname: String
    ) {
        val telephonyManager = getSystemService(TELEPHONY_SERVICE) as TelephonyManager
        val phoneNumber = telephonyManager.line1Number

        val hashedPhoneNumber = try {
            phoneNumber?.let { hashPhoneNumber(it) } ?: ""
        } catch (e: IllegalArgumentException) {
            Timber.tag("PHONE_HASH").w("Ï†ÑÌôîÎ≤àÌò∏ Ìï¥Ïãú Ïã§Ìå®: ${e.message}")
            ""
        }

        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
            if (!task.isSuccessful) {
                Timber.tag("FCM").w("FCM ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: ${task.exception}")
                return@addOnCompleteListener
            }

            val fcmToken = task.result ?: ""
            Timber.tag("FCM").d("FCM ÌÜ†ÌÅ∞: $fcmToken")

            TokenManager.saveFcmToken(this, fcmToken)

            loginViewModel.loginWithKakao(
                kakaoAccessToken = accessToken,
                email = email,
                hashedPhoneNumber = hashedPhoneNumber,
                profile = profileImage,
                nickname = nickname,
                fcmToken = fcmToken
            )
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<out String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == 1234) {
            val deniedPermanently = permissions.indices.any { i ->
                grantResults[i] == PackageManager.PERMISSION_DENIED &&
                        !ActivityCompat.shouldShowRequestPermissionRationale(this, permissions[i])
            }

            if (deniedPermanently) {
                Toast.makeText(this, "Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§. ÏÑ§Ï†ïÏóêÏÑú Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî", Toast.LENGTH_LONG).show()
                val intent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                    data = android.net.Uri.fromParts("package", packageName, null)
                }
                startActivity(intent)
                return
            }

            val isNotificationGranted = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                permissions.indexOf(Manifest.permission.POST_NOTIFICATIONS).takeIf { it != -1 }
                    ?.let { grantResults[it] == PackageManager.PERMISSION_GRANTED } ?: false
            } else {
                true
            }
            TokenManager.saveAlarmPermission(this, isNotificationGranted)

            if (grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                logHashedPhoneNumberWithPermissionCheck()
            } else {
                Timber.tag("PHONE_HASH").w("Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏñ¥ Ï†ÑÌôîÎ≤àÌò∏Î•º ÏàòÏßëÌï† Ïàò ÏóÜÏäµÎãàÎã§.")
            }
        }
    }

    /**
     * üîÑ ViewModelÏùò ÏÉÅÌÉú Í¥ÄÏ∞∞
     */
    private fun setupObservers() {
        loginViewModel.loginData.observe(this) { loginData ->
            // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ï≤òÎ¶¨
            loginData?.let {
                getSharedPreferences("auth", MODE_PRIVATE).edit {
                    putBoolean(
                        "isLoginSuccess", true
                    )
                }
                logHashedPhoneNumberWithPermissionCheck()
                enableLoginButton() // Î≤ÑÌäº Îã§Ïãú ÌôúÏÑ±Ìôî
                navigateToMain()
            }
        }

        loginViewModel.errorMessage.observe(this) { error ->
            error?.let {
                Timber.tag("error: ").e(it)
//                Toast.makeText(this, it, Toast.LENGTH_SHORT).show()
                enableLoginButton() // ÏóêÎü¨ ÎÇòÎèÑ Î≤ÑÌäº Îã§Ïãú ÌôúÏÑ±Ìôî
            }
        }
    }

    /**
     * üßë ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
     */
    private fun setupListeners() {
        binding.btnKakaoLogin.setOnClickListener {
            performKakaoLogin()
        }
    }

    /**
     * üîê Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏãúÎèÑ ‚Üí accessToken ÌöçÎìù
     */
    private fun performKakaoLogin() {
        disableLoginButton() // Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî

        val callback: (OAuthToken?, Throwable?) -> Unit = { token, error ->
            if (error != null) {
                Toast.makeText(this, "Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${error.localizedMessage}", Toast.LENGTH_SHORT)
                    .show()
                enableLoginButton()
            } else if (token != null) {
                getKakaoUserInfo(token.accessToken)
            }
        }

        if (UserApiClient.instance.isKakaoTalkLoginAvailable(this)) {
            UserApiClient.instance.loginWithKakaoTalk(this, callback = callback)
        } else {
            UserApiClient.instance.loginWithKakaoAccount(this, callback = callback)
        }
    }

    /**
     * üë§ Ïπ¥Ïπ¥Ïò§ Ïú†Ï†Ä Ï†ïÎ≥¥(email) ÌöçÎìù ÌõÑ ÏÑúÎ≤Ñ Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
     */
    private fun getKakaoUserInfo(kakaoAccessToken: String) {
        UserApiClient.instance.me { user, error ->
            if (error != null || user?.kakaoAccount?.email == null) {
                Toast.makeText(this, "Ïπ¥Ïπ¥Ïò§ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏöîÏ≤≠ Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                enableLoginButton()
            } else {
                val email = user.kakaoAccount?.email.toString()
                val profile = user.kakaoAccount?.profile?.profileImageUrl.toString()
                val nickname = user.kakaoAccount?.profile?.nickname.toString()

                // ‚¨áÔ∏è Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ (accessToken Ìè¨Ìï®)
                collectLoginInfoAndLogin(
                    accessToken = kakaoAccessToken,
                    email = email,
                    profileImage = profile,
                    nickname = nickname
                )
            }
        }
    }

    private fun disableLoginButton() {
        binding.btnKakaoLogin.isEnabled = false
        binding.btnKakaoLogin.alpha = 0.5f
    }

    private fun enableLoginButton() {
        binding.btnKakaoLogin.isEnabled = true
        binding.btnKakaoLogin.alpha = 1f
    }

    /**
     * üè† MainActivityÎ°ú Ï†ÑÌôò
     */
    private fun navigateToMain() {
        val intent = Intent(this, MainActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        startActivity(intent)
        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
    }
}